import os 
import configparser 
import sys 

def writePost(rootDirectory, stagingDirectory, postDirectory, publicDirectory, siteDirectory, editorCommand, postDate, postName): 
	"""Takes a number of fields as input, makes a file with the post date and name supplied in the post directory and calls the user's favorite editor to write the file. When the file is written, the user is prompted about whether or not to publish it. Publishing the post will trigger a local server preview of the post. This is canceled by hitting CTRL-C. If the user still wishes to proceed, the generated files (generated by the server preview build) are copied to the site directory. Git adds, commits, and pushes the new post to the static site and then Python terminates the script.  
	"""
	makeFile = "touch" + " " + postDirectory + postDate + "-" + postName 
	editFile = editorCommand + " " + postDirectory + postDate + "-" + postName 
	os.system(makeFile) 
	os.system(editFile)
	
	ans = raw_input("publish post? y/n: ")
	if ans == 'y': 
		os.chdir(stagingDirectory)
		gencmd = "lein ring server"
		os.system(gencmd)
		print "\n post preview has been generated \n"
		ans2 = raw_input("still want to publish the post? y/n: ")
		if ans2 == 'n': 
			sys.exit()
		print "\n posting now \n"
		os.chdir(rootDirectory)
		pubCommand = "cp -r" + " " + publicDirectory + " " + siteDirectory
		os.system(pubCommand)
		os.chdir(siteDirectory)
		os.system("git add .")
		os.system("git commit -m \'new post\'")
		os.system("git push origin")
		sys.exit() 
	else: 
		sys.exit()

def start(): 
	""" Receives command-line input, asks user if they want to write a post. If not, Python terminates the script. If so, the configparser reads in all of the critical fields needed for post writing and calls the writePost() function with the fields as input. 
	"""
	postDate = sys.argv[1] 
	postName = sys.argv[2]
	ans = raw_input("write post? y/n: ")
	if ans == 'n': 
		sys.exit()
	else: 
		cfg = configparser.ConfigParser() 
		cfg.read('cfg.ini')
		if 'CFGINFO' in cfg:
			rootDirectory = cfg['CFGINFO']['rootDirectory']
			stagingDirectory = cfg['CFGINFO']['stagingDirectory']
			postDirectory = cfg['CFGINFO']['postDirectory']
			publicDirectory = cfg['CFGINFO']['publicDirectory']
			siteDirectory = cfg['CFGINFO']['siteDirectory']
			editorCommand = cfg['CFGINFO']['editorCommand']
			writePost(rootDirectory, stagingDirectory, postDirectory, publicDirectory, siteDirectory, editorCommand, postDate, postName)
		else: 
			sys.exit()

if __name__ == '__main__': 
	start() 






